# -*- coding: utf-8 -*-
"""etl_titanic_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M888D-ZfLkzcayyCG4e1_O6l5GRnECsT
"""

import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
import joblib

def load_data(filepath='/content/tested.csv'):
    print("Loading data...")
    return pd.read_csv(filepath)

def load_data(filepath='tested.csv'):
    print("Loading data...")
    return pd.read_csv(filepath)

# Preprocess and transform the data
def preprocess_data(df):
    print("Preprocessing...")

    df = df.drop(['Name', 'Cabin', 'Ticket', 'PassengerId'], axis=1)

    X = df.drop('Survived', axis=1)
    y = df['Survived']

    num_features = ['Age', 'Fare', 'SibSp', 'Parch', 'Pclass']
    cat_features = ['Sex', 'Embarked']

    num_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='mean')),
        ('scaler', StandardScaler())
    ])

    cat_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
    ])

    preprocessor = ColumnTransformer(transformers=[
        ('num', num_transformer, num_features),
        ('cat', cat_transformer, cat_features)
    ])

    pipeline = Pipeline(steps=[('preprocessor', preprocessor)])
    X_processed = pipeline.fit_transform(X)

    return X_processed, y, pipeline

def save_data(X, y, pipeline):
    print("Saving data...")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    joblib.dump((X_train, X_test, y_train, y_test), 'processed_titanic_data.pkl')
    joblib.dump(pipeline, 'titanic_pipeline.joblib')
    print("Data and pipeline saved.")

def main():
    df = load_data('tested.csv')
    X, y, pipeline = preprocess_data(df)
    save_data(X, y, pipeline)

if __name__ == '__main__':
    main()